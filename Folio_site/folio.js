/* 

written by Joe Wallace, October 2017

the code below adds the concordance functionality
also the listeners for the "reset", "home", "previous" and "next" buttons

the html texts themselves were generated by a Python script I wrote,
which uses regular expressions to extract plays from Shakespeare's
First Folio and then add html tags

*/

function setup() {
	
	var titles = ['The Tempest', 'The Two Gentlemen of Verona', 'The Merry Wiues of Windsor', 
	'Measvre, For Measure', 'The Comedie of Errors', 'Much adoe about Nothing', "Loues Labour's lost", 
	'A Midsommer Nights Dreame', 'The Merchant of Venice', 'As you Like it', 'The Taming of the Shrew', 
	"All's Well, that Ends Well", 'Twelfe Night, Or what you will', 'The Winters Tale', 
	'The life and death of King John', 'The life and death of King Richard the Second', 
	'The First Part of Henry the Fourth', 'The Second Part of Henry the Fourth', 'The Life of Henry the Fift', 
	'The first Part of Henry the Sixt', 'The second Part of Henry the Sixt', 'The third Part of Henry the Sixt', 
	'The Tragedie of Richard the Third', 'The Famous History of the Life of King Henry the Eight', 
	'The Tragedie of Coriolanus', 'The Tragedie of Titus Andronicus', 'The Tragedie of Romeo and Juliet', 
	'The Life of Timon of Athens', 'The Tragedie of Julius Caesar', 'The Tragedie of Macbeth', 'The Tragedie of Hamlet', 
	'The Tragedie of King Lear', 'The Tragedie of Othello, the Moore of Venice', 'The Tragedie of Anthonie, and Cleopatra', 
	'The Tragedie of Cymbeline'];
	
	var $ = function(id) {return document.getElementById(id);};
	var $_c = function(id) {return document.getElementsByClassName(id);};
	
	var fulltext = "";
	var word = "";
	
	// some plays have act breaks and some not. fulltext id refers to those without act breaks
	if ($("fulltext")) {
		fulltext = $("fulltext").innerHTML;
	}
	else {
		for (var i = 0; i < 5; i++) {
			fulltext += $_c("text")[i].innerHTML; // not generally advisable to concatenate html but in this case is ok
		}
	}
	
	// function to parse url arguments
	function urlArgs() {
		var args = {};
		var query = location.search.substring(1);
		var pos = query.indexOf('=');
		var nom = query.substring(0, pos);
		var val = query.substring(pos+1);
		val = decodeURIComponent(val);
		args[nom] = val;
		return args;
	}
	
	var args = urlArgs();
	
	// only executes if the concordance form has a value
	if (args.word) {
		
		// defines word; strips + symbol and spaces if present
		word = args.word;
		var pluses = /[+]/g;
		word = word.replace(pluses, "");
		var spaces = /[\s]/g;
		word = word.replace(spaces, "");
		
		var pattern = /[\w]+|[^\s]+/g; // this regex tokenizes all words and punctuation; preserves <br> tags
		var tokens = fulltext.match(pattern); // array of tokens
		
		var output = []; // array to hold matching tokens
		var padding = 20; // number of tokens displayed before and after selected word
		var ending = "<br><br>-------------------------<br><br>"; // divider between text excerpts
		var pattern2 = /[.,;:?!]+<br>|[.,;:?!]+<br><br>/g; // this regex represents punctuation and <br> tags
		
		for (var i = 0; i < tokens.length; i++) {
			// deploys regex above to get word in usable form; checks each token against word
			if (tokens[i].replace(pattern2, "").toLowerCase() == word.toLowerCase()) { 
				/* the three conditions below deal with possibility of word occurring at beginning or end of the text;
				the first branch is by far the most likely; word neither at beginning nor end
				*/
				if (tokens[i-padding] && tokens[i+padding]) {		
					var line = tokens.slice(i-padding, i+padding);
					// show selected word in red; in this case padding denotes position of word
					line[padding] = "<span style='color:red'>"+line[padding]+"</span>";  
					output.push(line);
				}
				// in this case the word is near the beginning
				else if (!tokens[i-padding]) { 
					var line = tokens.slice(0, i+padding);
					// in this case i simply denotes position of word
					line[i] = "<span style='color:red'>"+line[i]+"</span>"; 
					output.push(line);
				}
				// in this case tokens[i+padding] would be undefined and therefore word is near the end
				else { 
					var line = tokens.slice(i-padding, tokens.length);
					/* 
					finds position of word by checking it against length of the tokens array and length of the line array;
					word will be i back from end of tokens array and so tokens.length minus i gives middle of line array 
					*/
					line[line.length - (tokens.length-i)] = "<span style='color:red'>"
					+line[line.length - (tokens.length-i)]+"</span>";
					output.push(line);
				}
			}
		}
		
		// now process the output for display; first display number of results
		var w = word;
		var results = "Word is: "+w+"<br><br>Total Results: "+output.length.toString()+ending;
		
		// output is an array of arrays; process each array separately and add divider
		for (var j = 0; j < output.length; j++) {
			var lines = "";
			lines = output[j].join(" ");
			lines = lines+ending;
			results += lines;
		}
		
		// finally change the display to show the processed results
		if ($("fulltext")) {
			$("fulltext").innerHTML = results;
		}
		else {
			var text = $_c("text");
			text[0].innerHTML = results;
			for (var k = 1; k < 5; k++) {
				text[k].style.display = "none";
			}
		}
	}
	
	/* the following event listeners define the reset, previous, next, and home buttons */	
	
	$("reset").addEventListener("click", function() {
		if (location.search) {
			location = location.href.replace(location.search.substring(0), "");
		} else {location.reload();}
	});
	
	var index;
	// determine where we are in the titles array and set the index
	for (var i = 0; i < titles.length; i++) {
		if (titles[i] == $("title").innerHTML) index = i; 
	}
	
	if ($("previous")) {
		if (titles[index-1]) {
			$("previous").addEventListener("click", function() {
				location = titles[index-1]+".html";
			});
		} else {
			$("previous").stytle.display = "none";
		}
	
	if ($("next")) {
		if (titles[index+1]) {
			$("next").addEventListener("click", function() {
				location = titles[index+1]+".html";
			});
		} else {
			$("next").style.display = "none";
		}
	
	$("home").addEventListener("click", function() {
		location = "Folio_Homepage.html";
	});
}

// function to register event listeners
function onLoad(f) {
	if (onLoad.loaded) {
		window.setTimeout(f, 0);
	}
	else if (window.addEventListener) {
		window.addEventListener("load", f, false);
	}
	else if (window.attachEvent) {
		window.attachEvent("onload", f);
	}
}
onLoad.loaded = false;
onLoad(function(){onLoad.loaded=true;});
onLoad(setup);
